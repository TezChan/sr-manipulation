<launch>
	<include file="$(find sr_object_manipulation_launch)/machines/robot.machine"/>
	<!-- send parameters for collision checking; this includes parameters for the self filter -->
	<rosparam command="load" ns="robot_description_collision" file="$(find sr_object_manipulation_launch)/config/collision_checks_both_arms.yaml" />

	<!-- send parameters for multidof -->
	<rosparam command="load" ns="robot_description_planning" file="$(find sr_object_manipulation_launch)/config/multi_dof_joints.yaml" />

	<!-- send parameters needed for motion planning -->
	<rosparam command="load" ns="robot_description_planning" file="$(find sr_object_manipulation_launch)/config/planning_groups.yaml" />

	<param name="arm_description" command="$(find xacro)/xacro.py '$(find sr_hand)/model/robots/xacro/sr_arm_motor.urdf.xacro'" />
	<param name="hand_description" command="$(find xacro)/xacro.py '$(find sr_hand)/model/robots/xacro/shadowhand_motor.urdf.xacro'" />
	<param name="robot_description" command="$(find xacro)/xacro.py '$(find sr_hand)/model/robots/xacro/arm_and_hand_motor.urdf.xacro'"/>

	<!--
	    Kinematics
	-->
	<node pkg="arm_kinematics_constraint_aware" type="arm_kinematics_constraint_aware" name="sr_right_arm_kinematics" output="screen">

	  <!-- Collision environment parameters -->
	  <remap from="robot_description" to="/robot_description" />
	  <remap from="collision_map" to="collision_map_occ" />
	  <remap from="collision_map_update" to="collision_map_occ_update" />

	  <param name="pointcloud_padd" type="double" value="0.0" />
	  <param name="object_padd" type="double" value="0.0" />

	  <param name="group" type="string" value="right_arm" />
	  <param name="allow_valid_collisions" type="bool" value="true" />

	  <param name="use_collision_map" type="bool" value="false" />
	  <param name="collision_map_safety_timeout" type="double" value="0.0" />
	  <param name="joint_states_safety_timeout" type="double" value="1.0" />
	  <param name="tf_safety_timeout" type="double" value="1.0" />
	  <param name="bounding_planes" type="string" value="0 0 1 -0.01" />

	  <rosparam command="load" file="$(find sr_object_manipulation_launch)/config/robot_padding.yaml" />
	  <rosparam command="load" file="$(find sr_object_manipulation_launch)/config/kdl_sr_arm_kinematics.yaml" />
	</node>

	<node pkg="sr_kinematics" name="ff_kinematics" type="sr_kinematics">
		<param name="urdf_description" command="$(find xacro)/xacro.py '$(find sr_hand)/model/robots/xacro/arm_and_hand_motor.urdf.xacro'"/>
		<param name="root_name" type="string" value="palm"/>
		<param name="tip_name" type="string" value="ffdistal"/>
		<param name="maxIterations" type="int" value="1000"/>
		<param name="epsilon" type="double" value="0.001"/>
	</node>
	<node pkg="sr_kinematics" name="mf_kinematics" type="sr_kinematics">
		<param name="urdf_description" command="$(find xacro)/xacro.py '$(find sr_hand)/model/robots/xacro/arm_and_hand_motor.urdf.xacro'"/>
		<param name="root_name" type="string" value="palm"/>
		<param name="tip_name" type="string" value="mfdistal"/>
		<param name="maxIterations" type="int" value="1000"/>
		<param name="epsilon" type="double" value="0.001"/>
	</node>
	<node pkg="sr_kinematics" name="rf_kinematics" type="sr_kinematics">
		<param name="urdf_description" command="$(find xacro)/xacro.py '$(find sr_hand)/model/robots/xacro/arm_and_hand_motor.urdf.xacro'"/>
		<param name="root_name" type="string" value="palm"/>
		<param name="tip_name" type="string" value="rfdistal"/>
		<param name="maxIterations" type="int" value="1000"/>
		<param name="epsilon" type="double" value="0.001"/>
	</node>
	<node pkg="sr_kinematics" name="lf_kinematics" type="sr_kinematics">
		<param name="urdf_description" command="$(find xacro)/xacro.py '$(find sr_hand)/model/robots/xacro/arm_and_hand_motor.urdf.xacro'"/>
		<param name="root_name" type="string" value="palm"/>
		<param name="tip_name" type="string" value="lfdistal"/>
		<param name="maxIterations" type="int" value="1000"/>
		<param name="epsilon" type="double" value="0.001"/>
	</node>
<!--	<node pkg="arm_kinematics" name="th_kinematics" type="arm_kinematics">
		<param name="urdf_description" command="$(find xacro)/xacro.py '$(find sr_hand)/model/robots/xacro/arm_and_hand_motor.urdf.xacro'"/>
		<param name="root_name" type="string" value="palm"/>
		<param name="tip_name" type="string" value="thdistal"/>
		<param name="maxIterations" type="int" value="1000"/>
		<param name="epsilon" type="double" value="0.5"/>
	</node>
-->


	<node pkg="sr_hand" name="shadowarm"
	type="shadowarm_virtual" machine="robot">
		<remap from="robot_description" to="arm_description"/>
		<param name="shadowhand_prefix" type="string" value="sr_arm/" />
		<param name="gazebo_joint_states_prefix" type="string" value="gazebo/" />
		<param name="publish_frequency_diagnostics" type="double" value="1.0" />
		<param name="publish_frequency" type="double" value="20.0" />
	</node>
	<!-- Robot state publisher: publishes tf information regarding the positions
		of
		the
		arm
		-->
	<node pkg="robot_state_publisher" type="state_publisher"
	name="robot_state_publisher_pos_arm"
		machine="robot">
		<remap from="robot_description" to="arm_description"/>
		<remap from="joint_states" to="/sr_arm/position/joint_states" />
		<param name="publish_frequency" type="double" value="10.0" />
		<param name="tf_prefix" type="string" value="sr_arm/position" />
	</node>

	<!-- Robot state publisher: publishes tf information regarding the targets
		of
		the
		arm
		-->
	<node pkg="robot_state_publisher" type="state_publisher"
	name="robot_state_publisher_target_arm"
		machine="robot">
		<remap from="robot_description" to="arm_description"/>
		<remap from="joint_states" to="sr_arm/target/joint_states" />
		<param name="publish_frequency" type="double" value="1.0" />
		<param name="tf_prefix" type="string" value="sr_arm/target" />
	</node>


	<!--
           shadowhand
                         -->
	<node pkg="sr_hand" name="shadowhand"
	type="shadowhand_virtual" machine="robot">
		<remap from="robot_description" to="hand_description" />
		<param name="gazebo_joint_states_prefix" type="string" value="gazebo/" />
		<param name="shadowhand_prefix" type="string" value="srh/" />
		<param name="publish_frequency_diagnostics" type="double" value="1.0" />
		<param name="publish_frequency" type="double" value="20.0" />
	</node>

	<!-- Robot state publisher: publishes tf information regarding the position
		of
		the
		hand
		-->
	<node pkg="robot_state_publisher" type="state_publisher"
	name="srh_robot_state_publisher_pos"
		machine="robot">
		<remap from="robot_description" to="hand_description"/>
		<remap from="joint_states" to="srh/position/joint_states" />
		<param name="publish_frequency" type="double" value="10.0" />
		<param name="tf_prefix" type="string" value="srh/position" />
	</node>

	<node pkg="robot_state_publisher" type="state_publisher"
	name="srh_robot_state_publisher_target"
		machine="robot">
		<remap from="robot_description" to="hand_description"/>
		<remap from="joint_states" to="srh/target/joint_states" />
		<param name="publish_frequency" type="double" value="1.0" />
		<param name="tf_prefix" type="string" value="srh/target" />
	</node>


	<!-- publishes fixed transform: to link the arm and the hand for both targets
	     and positions + a fixed transform to a fixed point at 0 0 0, to remap the
	     arm base for both positions and targets. -->
<!--	<node pkg="tf" type="static_transform_publisher" name="fixed_to_base_link"
		args="-0.05 -0.75 1.0 1.5708 0 0 /world /shadowarm_base 100" machine="robot" />
	<node pkg="tf" type="static_transform_publisher" name="fixed_frame_pos_pub_arm"
		args="0.0 0.0 0.0 0 0 0 /shadowarm_base /sr_arm/position/shadowarm_base 100" machine="robot" />
	<node pkg="tf" type="static_transform_publisher" name="fixed_frame_target_pub_arm"
		args="0 0 0.0 0 0 0  /sr_arm/position/shadowarm_base /sr_arm/target/shadowarm_base 100" machine="robot"/>-->

		<node pkg="tf" type="static_transform_publisher" name="fixed_frame_pos_pub_arm" 		args="0 0 0 0 0 0 fixed /sr_arm/position/world 100" />
		<node pkg="tf" type="static_transform_publisher" name="fixed_frame_target_pub_arm" 			args="0 0 0 0 0 0 fixed /sr_arm/target/world 100" /> 

	<node pkg="tf" type="static_transform_publisher" name="link_hand_arm_pos"
		args="0 0 0 2.3562 0 0 /sr_arm/position/shadowarm_handsupport_motor /srh/position/forearm_motor 100" machine="robot"/>
	<node pkg="tf" type="static_transform_publisher" name="link_hand_arm_target"
		args="0 0 0 2.3562 0 0 /sr_arm/target/shadowarm_handsupport_motor /srh/target/forearm_motor 100"
		machine="robot"/>


         <include file="$(find sr_hand)/launch/fingertip_static_transform.launch"/>

	<!-- merge the arm / hand joint_states topics to publish onto /joint_states -->
	<node pkg="sr_utilities" type="joint_states_merger.py" name="joint_states_merger"/>

	<node pkg="robot_state_publisher" type="state_publisher"
	name="robot_state_publisher_full_pos"
		machine="robot">
		<param name="publish_frequency" type="double" value="20.0" />
	</node>

<!--	<node pkg="tf" type="static_transform_publisher" name="fixed_frame_pos_pub_arm_np"
		args="0.0 0.0 1.0 0.0 0 0 / /shadowarm_base 100" machine="robot" />
-->

	<!--
	    Diagnostic Aggregator
	    -->
	<node pkg="diagnostic_aggregator" type="aggregator_node" name="sr_diagnostic_aggregator"
		machine="robot">
		<rosparam command="load" file="$(find sr_hand)/shadowhand_analyzer.yaml"
			/>
	</node>

	<!--
	    Trajectories / grasp execution
	-->
<!--	<node pkg="sr_move_arm" type="move_arm_simple_action" name="move_arm_simple_action"  machine="robot"/>  -->

        <node pkg="sr_mechanism_controllers" type="joint_trajectory_action_controller" name="sr_joint_trajectory_action_controller"/>

        <node pkg="move_arm" type="move_arm_simple_action" name="move_arm_simple_action">
	  <remap from="robot_description" to="robot_description" />
	  <remap from="joint_state" to="joint_states" />
	  <remap from="arm_ik" to="/sr_right_arm_kinematics/get_constraint_aware_ik" />
	  <remap from="arm_fk" to="/sr_right_arm_kinematics/get_fk" />

	  <remap from="filter_trajectory" to="/trajectory_filter/filter_trajectory_with_constraints" />

	  <remap from="get_trajectory_validity" to="environment_server/get_trajectory_validity" />
	  <remap from="get_environment_safety" to="environment_server/get_environment_safety" />
	  <remap from="get_execution_safety" to="environment_server/get_execution_safety" />
	  <remap from="get_group_info" to="environment_server/get_group_info" />
	  <remap from="get_robot_state" to="environment_server/get_robot_state" />
	  <remap from="get_state_validity" to="environment_server/get_state_validity" />

	  <param name="group" type="string" value="right_arm" />
	  <param name="ik_allowed_time" type="double" value="2.0" />
	  <param name="trajectory_filter_allowed_time" type="double" value="2.0" />
	  <param name="group" type="string" value="right_arm" />
	  <param name="controller_action_name" type="string" value="/r_arm_controller/joint_trajectory_action" />

	  <param name="pause_allowed_time" type="double" value="15.0" />
	</node>

	<node pkg="sr_move_arm" type="hand_posture_execution" name="hand_posture_execution" machine="robot"/>

	<node name="reactive_grasp_node_right" pkg="sr_move_arm"
	      type="reactive_grasp_server.py" args="r" respawn="false" output="screen">
	  <param name="use_slip_controller" value="True"/>
	  <param name="use_slip_detection" value="True"/>
	  <param name="grasp_num_tries" value="4"/>

	  <rosparam file="$(find sr_move_arm)/config/tactile_thresholds.yaml" command="load"/>
	</node>

	<node pkg="sr_tactile_sensors" name="sr_tactile" type="sr_tactile_virtual_gazebo" respawn="false">
	  <rosparam file="$(find sr_tactile_sensors)/params/sensor_names.yaml" command="load"/>
	</node>
</launch>


